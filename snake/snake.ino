//Y=0 - 119  
//X=0 - 158
#include "VGA.h"
#include <QueueArray.h>


unsigned char  snakeForm[35][34] = {
                              	 { WHITE,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
                              	 { BLACK,BLACK,GREEN,BLACK,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,GREEN,GREEN,GREEN,GREEN,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { BLACK,GREEN,WHITE,BLACK,GREEN,GREEN,BLACK,WHITE,BLACK,BLACK,GREEN,GREEN,WHITE,WHITE,GREEN,BLACK,WHITE,WHITE,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,WHITE },
				 { BLACK,BLACK,BLACK,GREEN,GREEN,GREEN,BLACK,BLACK,WHITE,BLACK,GREEN,WHITE,WHITE,GREEN,GREEN,BLACK,WHITE,WHITE,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,GREEN,GREEN,BLACK },
				 { BLACK,GREEN,GREEN,WHITE,GREEN,GREEN,GREEN,BLACK,BLACK,GREEN,WHITE,WHITE,GREEN,GREEN,GREEN,GREEN,BLACK,BLACK,GREEN,BLACK,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,GREEN,BLACK,BLACK,WHITE },
				 { WHITE,BLACK,BLACK,BLACK,WHITE,GREEN,GREEN,BLACK,GREEN,GREEN,WHITE,GREEN,GREEN,GREEN,GREEN,GREEN,GREEN,GREEN,GREEN,GREEN,BLACK,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,GREEN,BLACK,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,BLACK,GREEN,GREEN,GREEN,BLACK,GREEN,GREEN,GREEN,GREEN,GREEN,GREEN,GREEN,GREEN,GREEN,BLACK,BLACK,BLACK,GREEN,BLACK,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,BLACK,GREEN,BLACK,BLACK,BLACK,BLACK,GREEN,GREEN,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,GREEN,WHITE,BLACK,WHITE,WHITE,WHITE,BLACK,WHITE,GREEN,BLACK,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,BLACK,GREEN,GREEN,BLACK,GREEN,WHITE,GREEN,BLACK,WHITE,WHITE,BLACK,WHITE,GREEN,BLACK,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,YELLOW,YELLOW,WHITE,BLACK,BLACK,WHITE,BLACK,BLACK,GREEN,GREEN,BLACK,GREEN,GREEN,GREEN,BLACK,BLACK,BLACK,GREEN,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,YELLOW,YELLOW,YELLOW,WHITE,WHITE,YELLOW,BLACK,WHITE,WHITE,BLACK,BLACK,GREEN,GREEN,GREEN,BLACK,GREEN,WHITE,BLACK,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,YELLOW,YELLOW,YELLOW,YELLOW,BLACK,YELLOW,YELLOW,BLACK,GREEN,GREEN,BLACK,BLACK,BLACK,GREEN,BLACK,GREEN,GREEN,GREEN,GREEN,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,YELLOW,BLACK,BLACK,BLACK,BLACK,YELLOW,BLACK,GREEN,GREEN,BLACK,BLACK,WHITE,WHITE,BLACK,BLACK,GREEN,GREEN,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,YELLOW,YELLOW,YELLOW,YELLOW,BLACK,GREEN,GREEN,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,GREEN,BLACK,BLACK,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,GREEN,BLACK,BLACK,BLACK,BLACK,BLACK,GREEN,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,GREEN,GREEN,GREEN,GREEN,GREEN,BLACK,BLACK,WHITE,BLACK,GREEN,WHITE,WHITE,GREEN,GREEN,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,BLACK,BLACK,GREEN,GREEN,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,GREEN,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,GREEN,WHITE,WHITE,WHITE,GREEN,GREEN,BLACK,BLACK,BLACK,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,GREEN,GREEN,GREEN,BLACK,BLACK,BLACK,BLACK,GREEN,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,GREEN,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,GREEN,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,GREEN,GREEN,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,WHITE,WHITE,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,WHITE,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },
				 { BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE },				
                             	  };



boolean start = false;
int score= 0;
int width = VGA.getHSize();
int height = VGA.getVSize();

int xfood=1;
int yfood=height/2;

int direction;
int snakeSize;

QueueArray  <int> headPosX;
QueueArray  <int> headPosY;

const int mapwidth = width-3;
const int mapheight = height-3;

int xsnakehead;
int ysnakehead;

void drawMargins(){
    VGA.clear();
    VGA.setBackgroundColor(BLACK);
    VGA.setColor(RED);
    VGA.printtext(45,2,"SNAKE BYTE");
    VGA.setColor( WHITE );

    VGA.drawRect( 0, 10, 1, mapheight );
    VGA.drawRect( width-1, 10, 1, mapheight );
    
    VGA.drawRect( 0, 10, width, 1 );
    VGA.drawRect( 0, height-1, width, 1 );
}

void FeedTheSnake(){ 
    xfood = rand() % 156 + 2;
    yfood = rand() % 106 + 12;
    VGA.putPixel( xfood, yfood, RED );    
}

void move(int dx, int dy) {
	
	xsnakehead = xsnakehead + dx;
	ysnakehead = ysnakehead + dy;

        if (VGA.getPixel( xsnakehead, ysnakehead ) == WHITE||VGA.getPixel( xsnakehead, ysnakehead )==GREEN) {
	    VGA.setColor(RED);

            while(!headPosX.isEmpty())
            {
              headPosX.pop();
              headPosY.pop();
            }
            char* buffers="";
            itoa(score,buffers,10);
            VGA.printtext(40,mapheight/3,"GAME OVER");
            VGA.printtext(50,mapheight/3+15,"Score:");
            VGA.printtext(70,mapheight/3+15+15,buffers,true );
            delay(5000);
            start=false;
            setup();
            return;
	} 

        if (VGA.getPixel( xsnakehead, ysnakehead ) == RED) {
		FeedTheSnake();
                score++;
                snakeSize+=3;
	}

        VGA.putPixel( xsnakehead, ysnakehead, GREEN ); 
        delay(50);
        
        headPosX.enqueue(xsnakehead);
        headPosY.enqueue(ysnakehead);
        
        if(headPosX.count()==snakeSize)
        {
            int xSnakeTail= headPosX.dequeue();
            int ySnakeTail=headPosY.pop();
            VGA.putPixel( xSnakeTail, ySnakeTail, BLACK );
            delay(50);
        }       
}

void update() {
	switch (direction) {
	case 0: move(1, 0);
		break;
	case 1: move(0, -1);
		break;
	case 2: move(0, 1);
		break;
	case 3: move(-1, 0);
		break;
	}	
}

void startScreen(){
  VGA.clear();
  
  VGA.setColor(GREEN);
  VGA.printtext(50,mapheight/3,"WELCOME");
  delay(100);
  if(digitalRead(FPGA_BTN_0)){
      start=true;  
      initializeGame();
  }
}

void initializeGame()
{
  direction = 0;
  snakeSize = 10;  
  
  xsnakehead=70;
  ysnakehead=70;
  drawMargins();
  
  FeedTheSnake();
}

void setup() {
  VGA.begin(VGAWISHBONESLOT(9),CHARMAPWISHBONESLOT(10));
  if(start){
    
    initializeGame();
    
  }else{
    startScreen();
    VGA.writeArea( 60, mapwidth/2, 34, 35, *snakeForm );
  }
  
}

void loop(){
  
  if(start){
    if(digitalRead(FPGA_BTN_0) && direction!=3){  
        direction=0;
      }else if(digitalRead(FPGA_BTN_1)&& direction!=2){  
        direction=1;
      }else if(digitalRead(FPGA_BTN_2)&& direction!=1){  
        direction=2;
      }else if(digitalRead(FPGA_BTN_3)&& direction!=0){ 
        direction=3;
      }
   update();
  }else{
    VGA.setColor(GREEN);
    VGA.printtext(35,mapheight/2,"Press Start");
    delay(10);
    VGA.setColor(BLACK);
    VGA.printtext(35,mapheight/2,"Press Start");
    
    if(digitalRead(FPGA_BTN_0)){
      start=true;  
      initializeGame();
  }
  }
}
